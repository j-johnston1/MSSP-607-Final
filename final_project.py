# -*- coding: utf-8 -*-
"""Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19pl7Jjg7HqUxe5R62hCfcPh3KM83CAIs

Determining the Impact of COVID-19 on the 2020 Presidential Election
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
from google.colab import files
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
# %matplotlib inline

"""# Subtask 1: 
Data Cleaning and Tracking Changes in Voter Behavior from 2016 to 2020	
"""

county_statistics = pd.read_csv("/content/drive/MyDrive/MSSP607Final/county_statistics.csv")

len(county_statistics)

#filter out counties without data because they can't help us answer the question
known_stats = county_statistics[county_statistics["cases"].notna()]
known_stats = known_stats[known_stats["total_votes20"].notna()]
known_stats = known_stats[known_stats["total_votes16"].notna()]
known_stats = known_stats[known_stats["percentage20_Donald_Trump"].notna()]

# convert "percentage" columns to actual percentages
known_stats["percentage16_Donald_Trump"] = known_stats["percentage16_Donald_Trump"].apply(lambda x: x*100)
known_stats["percentage20_Donald_Trump"] = known_stats["percentage20_Donald_Trump"].apply(lambda x: x*100)
known_stats["percentage16_Hillary_Clinton"] = known_stats["percentage16_Hillary_Clinton"].apply(lambda x: x*100)
known_stats["percentage20_Joe_Biden"] = known_stats["percentage20_Joe_Biden"].apply(lambda x: x*100)

known_stats["raw_diff_16_to_20"] = known_stats["votes20_Donald_Trump"] - known_stats["votes16_Donald_Trump"]
known_stats["percent_diff_16_to_20"] = known_stats["percentage20_Donald_Trump"] - known_stats["percentage16_Donald_Trump"]

len(known_stats)

known_stats.state.value_counts()

"""# Subtask 2:
Integrating longitudinal COVID-19 dataset. Focus on last month before election when grouping and looking at effect.
"""

covid_county = pd.read_csv("/content/drive/MyDrive/MSSP607Final/covid_us_county.csv")

covid_county["date"] = pd.to_datetime(covid_county["date"], utc=True)

only_month_before = covid_county.loc[((covid_county["date"].dt.month == 10) | (covid_county["date"].dt.month == 11)) & (covid_county["date"].dt.day == 2)]

covid_long = only_month_before.pivot_table(index=["county", "state_code"], columns="date", values=["cases", "deaths"], )

merged_data = covid_long.merge(known_stats, how='right', right_on=["county", "state"], left_on=["county", "state_code"])

merged_data.head()

def rem(x):
  if "tz" in str(x):
    splits = str(x).split()
    return splits[0][2:-2]+" "+splits[1][-10:]
  else:
    return x

merged_data.columns = [rem(i) for i in merged_data.columns.values]

merged_data.head()

merged_data["cases_month_before_election"] = merged_data["cases 2020-11-02"] - merged_data["cases 2020-10-02"]
merged_data["deaths_month_before_election"] = merged_data["deaths 2020-11-02"] - merged_data["deaths 2020-10-02"]

# check that case information lines up in both data sets
merged_data["cases_same"] = merged_data['cases 2020-11-02'] == merged_data['cases']

len(merged_data)

len(merged_data['cases_same'] == True)

merged_data["total_cases_as_percent_population"] = round((merged_data["cases"]/merged_data["TotalPop"])*100, 2)
merged_data["total_deaths_as_percent_population"] = round((merged_data["deaths"]/merged_data["TotalPop"])*100, 2)
merged_data["cases_month_before_as_percent_population"] = round((merged_data["cases_month_before_election"]/merged_data["TotalPop"])*100, 2)
merged_data["deaths_month_before_as_percent_population"] = round((merged_data["deaths_month_before_election"]/merged_data["TotalPop"])*100, 2)

merged_data

sum_stats = {
    "Mean" : [merged_data.cases_month_before_as_percent_population.mean(), merged_data.deaths_month_before_as_percent_population.mean(), merged_data.total_cases_as_percent_population.mean(), merged_data.total_deaths_as_percent_population.mean()],
    "Median" : [merged_data.cases_month_before_as_percent_population.median(), merged_data.deaths_month_before_as_percent_population.median(), merged_data.total_cases_as_percent_population.median(), merged_data.total_deaths_as_percent_population.median()],
    "Max" : [max(merged_data.cases_month_before_as_percent_population), max(merged_data.deaths_month_before_as_percent_population), max(merged_data.total_cases_as_percent_population), max(merged_data.total_deaths_as_percent_population)],
}

sum_stats_df = pd.DataFrame(data=sum_stats, columns = ["Mean", "Median", "Max"], index = ["Cases in October as Percent of Population", "Deaths in October as Percent of Population", "Total Cases as Percent of Population", "Total Deaths as Percent of Population"])

sum_stats_df

"""# Subtask 3: 
What Do Statistics Say About the Relationship Between COVID-19 Infection Rates and the Presidential Election Results?	
"""

merged_data["Trump_won20"] = merged_data["votes20_Donald_Trump"] > merged_data["votes20_Joe_Biden"]

data = {
    "Votes Received" : [sum(merged_data["votes20_Joe_Biden"]), sum(merged_data["votes20_Donald_Trump"])],
    "Counties Won"   : [len(merged_data.loc[merged_data["Trump_won20"] == False]), len(merged_data.loc[merged_data["Trump_won20"] == True])]
    }
summary_df = pd.DataFrame(data = data, columns = ["Votes Received", "Counties Won"], index = ["Joe Biden", "Donald Trump"])

summary_df

merged_data["shift_red"] = merged_data['percent_diff_16_to_20'] > 0
merged_data["shift_blue"] = merged_data['percent_diff_16_to_20'] < 0

print(f"Number of counties where Trump gained support from 2016 to 2020: {len(merged_data.loc[merged_data['shift_red'] == True])}")
print(f"Number of counties where Trump lost support from 2016 to 2020: {len(merged_data.loc[merged_data['shift_blue'] == True])}")

# Class that helps to center your colormap on zero if the values above and below zero are not evenly distributed.
# Formula taken from http://chris35wills.github.io/matplotlib_diverging_colorbar/
class MidpointNormalize(mcolors.Normalize):
	def __init__(self, vmin=None, vmax=None, midpoint=None, clip=False):
		self.midpoint = midpoint
		mcolors.Normalize.__init__(self, vmin, vmax, clip)

	def __call__(self, value, clip=None):
		x, y = [self.vmin, self.midpoint, self.vmax], [0, 0.5, 1]
		return np.ma.masked_array(np.interp(value, x, y), np.isnan(value))

# statistical tests tell us whether effects are more than what is expected from chance alone
# test to run: linear regression
from sklearn import datasets, linear_model
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm
from scipy import stats

"""## NOTE OF CAUTION: 
Not all the assumptions for linear regression have been met, so findings must be taken with a grain of salt. However, something this significant probably has something to it.
"""

# First, values must be log transformed to get a more normal distribution
merged_data['log_total_cases'] = np.log(merged_data.total_cases_as_percent_population)
merged_data['log_cases_month_before'] = np.log(merged_data.cases_month_before_as_percent_population)
merged_data['log_total_deaths'] = np.log(merged_data.total_deaths_as_percent_population)
merged_data['log_deaths_month_before'] = np.log(merged_data.deaths_month_before_as_percent_population)

merged_data_logs = merged_data[['log_total_cases', 'log_cases_month_before', 'log_total_deaths', 'log_deaths_month_before', 'percent_diff_16_to_20']]

merged_data_clean = merged_data_logs[~merged_data_logs.isin([np.nan, np.inf, -np.inf]).any(1)]

"""### Linear Regression Total Covid Cases"""

X = merged_data_clean.log_total_cases.values.reshape(-1,1)
Y = merged_data_clean.percent_diff_16_to_20.values.reshape(-1,1)
linear_regressor = LinearRegression()
fit = linear_regressor.fit(X, Y)  
Y_pred = linear_regressor.predict(X)

c = Y
cmap="RdBu_r"
vmin=-20
vmax=20
mid_val=0

plt.figure(figsize=(10,10))
plt.scatter(X, Y, c=c, cmap=cmap, clim=(vmin, vmax), norm=MidpointNormalize(midpoint=mid_val, vmin=vmin, vmax=vmax))
plt.plot(X, Y_pred, color='black')
plt.title("Shift in Voting Behavior Based on Total COVID Infection Rate")
plt.ylabel("Change in Percentage of Votes Trump Received from 2016 to 2020")
plt.xlabel("Log of the Percent of Population Infected with COVID-19")

mod = sm.OLS(Y,X)
fii = mod.fit()
print(fii.summary())

"""### Linear Regression COVID cases month before"""

Z = merged_data_clean.log_cases_month_before.values.reshape(-1,1)
Y = merged_data_clean.percent_diff_16_to_20.values.reshape(-1,1)
linear_regressor = LinearRegression()
fit = linear_regressor.fit(Z, Y)  
Y_pred = linear_regressor.predict(Z)

c = Y
cmap="RdBu_r"
vmin=-20
vmax=20
mid_val=0

plt.figure(figsize=(10,10))
plt.scatter(Z, Y, c=c, cmap=cmap, clim=(vmin, vmax), norm=MidpointNormalize(midpoint=mid_val, vmin=vmin, vmax=vmax))
plt.plot(Z, Y_pred, color='black')
plt.title("Shift in Voting Behavior Based on COVID Infection Rate the Month Before the Election")
plt.ylabel("Change in Percentage of Votes Trump Received from 2016 to 2020")
plt.xlabel("Log of the Percent of Population Infected with COVID-19 (in October 2020)")

mod = sm.OLS(Y,Z)
fii = mod.fit()
print(fii.summary())

"""### Linear Regression Total Covid Deaths"""

G = merged_data_clean.log_total_deaths.values.reshape(-1,1)
Y = merged_data_clean.percent_diff_16_to_20.values.reshape(-1,1)
linear_regressor = LinearRegression()
fit = linear_regressor.fit(G, Y)  
Y_pred = linear_regressor.predict(G)

c = Y
cmap="RdBu_r"
vmin=-20
vmax=20
mid_val=0

plt.scatter(G, Y, c=c, cmap=cmap, clim=(vmin, vmax), norm=MidpointNormalize(midpoint=mid_val, vmin=vmin, vmax=vmax))
plt.plot(G, Y_pred, color='black')
plt.title("Shift in Voting Behavior Based on Total COVID Death Rate")

mod = sm.OLS(Y,G)
fii = mod.fit()
print(fii.summary())

"""### Linear Regression COVID deaths month before"""

H = merged_data_clean.log_deaths_month_before.values.reshape(-1,1)
Y = merged_data_clean.percent_diff_16_to_20.values.reshape(-1,1)
linear_regressor = LinearRegression()
fit = linear_regressor.fit(H, Y)  
Y_pred = linear_regressor.predict(H)

c = Y
cmap="RdBu_r"
vmin=-20
vmax=20
mid_val=0

plt.scatter(H, Y, c=c, cmap=cmap, clim=(vmin, vmax), norm=MidpointNormalize(midpoint=mid_val, vmin=vmin, vmax=vmax))
plt.plot(H, Y_pred, color='black')
plt.title("Shift in Voting Behavior Based on COVID Death Rate the Month Before the Election")

mod = sm.OLS(Y,H)
fii = mod.fit()
print(fii.summary())

"""# Subtask 4: 
Integrating U.S. Geospatial Data and Mapping the Impact of COVID-19 on the 2020 Presidential Election	
"""

!pip install geopandas

import geopandas
from shapely.geometry import Point

#focus on continental USA only
continental_data = merged_data.loc[merged_data['state'] != 'HI']

points = continental_data.apply(lambda row: Point(float(row.long), float(row.lat)), axis=1)
geom_point_data = continental_data.set_geometry(points)

geom_point_data.geometry

xs = [point.x for point in geom_point_data.geometry]
ys = [point.y for point in geom_point_data.geometry]

state_map = geopandas.read_file("/content/drive/MyDrive/MSSP607Final/cb_2019_us_state_500k.shp")

state_map.head()

#The State shape file does not have any text, just shapes.
#I only want states from the continental US, so I need to remove HI and AK.
#State file also contains territories to be removed. 
#I plot each row individually so I can manually identify which ones I don't want.
for i in range(len(state_map.index)):
  plt.figure(i)
  state = state_map.loc[[i], 'geometry']
  state.plot()

#focus on continental USA only
#territories = 1, 9, 14, 41, 42
#hawaii = 7
#Alaska = 30
irrelevant = [1, 9, 14, 41, 42, 30, 7]

for index, row in state_map.iterrows():
  if index in irrelevant:
    state_map.drop(index, inplace=True)

"""## Map Total COVID Cases"""

c = geom_point_data["percent_diff_16_to_20"]
cmap="RdBu_r"
vmin=-10
vmax=10
mid_val=0
sizes=(100*geom_point_data.total_cases_as_percent_population)

ax = state_map.plot(figsize=(40,40), edgecolor='grey', color='white')
plt.scatter(xs, ys, c=c, cmap=cmap, clim=(vmin, vmax),
                     norm=MidpointNormalize(midpoint=mid_val, vmin=vmin, vmax=vmax),
                     marker='^', sizes=sizes)
cbar = plt.colorbar(shrink=.3, pad=.0001)
cbar.ax.get_yaxis().labelpad = 100
cbar.ax.set_ylabel('Change in % of votes Trump received from 2016 to 2020', rotation=270, labelpad=20, fontsize=20)
plt.title("Change in Voting Behavior (by county) as a Function of COVID-19 Cases", fontsize=30)

plt.text(-127, 25, "*Triangle size = percentage of the population infected with COVID-19", fontsize=17)

plt.savefig("COVID Map.png")

"""## Map COVID Cases Month Before"""

c = geom_point_data["percent_diff_16_to_20"]
cmap="RdBu_r"
vmin=-10
vmax=10
mid_val=0
sizes=(100*geom_point_data.cases_month_before_as_percent_population)

ax = state_map.plot(figsize=(40,40), edgecolor='grey', color='white')
plt.scatter(xs, ys, c=c, cmap=cmap, clim=(vmin, vmax),
                     norm=MidpointNormalize(midpoint=mid_val, vmin=vmin, vmax=vmax),
                     marker='^', sizes=sizes)
cbar = plt.colorbar(shrink=.3, pad=.0001)
cbar.ax.get_yaxis().labelpad = 100
cbar.ax.set_ylabel('Change in % of votes Trump received from 2016 to 2020', rotation=270, labelpad=20, fontsize=20)
plt.title("Change in Voting Behavior (by county) as a Function of COVID-19 Cases the Month Before the Election", fontsize=30)

plt.text(-127, 25, "*Triangle size = percentage of the population infected with COVID-19", fontsize=17)


plt.savefig("COVID Map Month Before.png")

files.download("COVID Map.png")
files.download("COVID Map Month Before.png")